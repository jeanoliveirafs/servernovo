version: '3.8'

services:
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - phantom-overlay
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  app:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - app_data:/app
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: ingress
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=*
      - LOG_LEVEL=info
    networks:
      - phantom-overlay
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 120s
      rollback_config:
        parallelism: 1
        delay: 30s
        monitor: 120s
    command: >
      sh -c "
        npm install --production &&
        npm start
      "
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    depends_on:
      - redis

  nginx:
    image: nginx:alpine
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
    volumes:
      - nginx_config:/etc/nginx/conf.d:ro
    networks:
      - phantom-overlay
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    depends_on:
      - app

  # Visualizer para monitoramento do Swarm (opcional)
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - phantom-overlay
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

volumes:
  redis_data:
    driver: local
  app_data:
    driver: local
  nginx_config:
    driver: local

networks:
  phantom-overlay:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.0.0/24 